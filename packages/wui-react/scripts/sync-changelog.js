import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Read the CHANGELOG.md file
const changelogPath = path.join(__dirname, "..", "CHANGELOG.md");
const changelogContent = fs.readFileSync(changelogPath, "utf8");

// Parse the changelog content
const parseChangelog = (content) => {
  const lines = content.split("\n");
  const sections = [];

  let currentSection = null;
  let currentChangeType = null;

  lines.forEach((line) => {
    // Version headers (## 1.1.0)
    if (line.startsWith("## ")) {
      if (currentSection) sections.push(currentSection);
      currentSection = {
        version: line.replace("## ", "").trim(),
        changes: [],
      };
    }
    // Change type headers (### Minor Changes, ### Patch Changes, etc.)
    else if (line.startsWith("### ")) {
      const header = line.replace("### ", "").toLowerCase();
      if (header.includes("major")) currentChangeType = "major";
      else if (header.includes("minor")) currentChangeType = "minor";
      else if (header.includes("patch")) currentChangeType = "patch";
    }
    // Individual changes (- [`6cf7536`](link) Thanks [@user](link)! - description)
    else if (line.startsWith("- ") && currentSection && currentChangeType) {
      // Parse the changeset format with commit and author links
      const changeMatch = line.match(
        /- \[`([^`]+)`\]\(([^)]+)\)(?: Thanks \[@([^\]]+)\]\(([^)]+)\))!? ?- (.+)/
      );
      if (changeMatch) {
        currentSection.changes.push({
          type: currentChangeType,
          commit: changeMatch[1],
          commitUrl: changeMatch[2],
          author: changeMatch[3],
          authorUrl: changeMatch[4],
          description: changeMatch[5],
        });
      } else {
        // Fallback for simpler formats
        const simpleMatch = line.match(/- (.+)/);
        if (simpleMatch) {
          currentSection.changes.push({
            type: currentChangeType,
            description: simpleMatch[1],
          });
        }
      }
    }
  });

  if (currentSection) sections.push(currentSection);
  return sections;
};

// Generate the TypeScript file
const generateChangelogData = (sections) => {
  return `// This file is auto-generated by scripts/sync-changelog.js
// Do not edit directly - update CHANGELOG.md instead

export interface ChangelogEntry {
  type: "major" | "minor" | "patch";
  description: string;
  commit?: string;
  commitUrl?: string;
  author?: string;
  authorUrl?: string;
  pr?: string;
}

export interface ChangelogSection {
  version: string;
  date?: string;
  changes: ChangelogEntry[];
}

export const changelog: ChangelogSection[] = ${JSON.stringify(sections, null, 2).replace(/"([^"]+)":/g, "$1:")};
`;
};

// Parse and write the file
const sections = parseChangelog(changelogContent);
const outputContent = generateChangelogData(sections);
const outputPath = path.join(__dirname, "..", "src", "data", "changelog.ts");

// Create the data directory if it doesn't exist
const dataDir = path.dirname(outputPath);
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
}

fs.writeFileSync(outputPath, outputContent);

console.log(`âœ… Changelog data synced to ${outputPath}`);
console.log(
  `ðŸ“Š Found ${sections.length} versions with ${sections.reduce((acc, s) => acc + s.changes.length, 0)} total changes`
);
